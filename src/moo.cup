/**********************************************************************
 Java CUP specification for a parser for moo programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal StructDeclNode   structDecl;
non terminal LinkedList 	  structBody;
non terminal FnDeclNode		  fnDecl;
non terminal FormalsListNode  formals;
non terminal LinkedList  formalsList;
non terminal FormalDeclNode	  formalDecl;
non terminal FnBodyNode		  fnBody;
non terminal LinkedList	  stmtList;
non terminal StmtNode		  stmt;
non terminal ExpNode		  exp;
non terminal TypeNode         type;
non terminal IdNode           id;

non terminal AssignNode		  assignExp;
non terminal ExpNode		  term;
non terminal ExpNode		  loc;
non terminal CallExpNode	  fncall;
non terminal LinkedList       actualList;

 
/* NOTE: Add precedence and associativity declarations here */
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left NOT; 

start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
				| fnDecl: f
				{: RESULT = f;
				:}
                | structDecl: s
                {: RESULT = s;
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                | STRUCT id:i1 id:i2 SEMICOLON
                {: RESULT = new VarDeclNode(new StructNode(i1), i2, 0);
                :}
                ;

structDecl		::= STRUCT id:i LCURLY structBody:sb RCURLY SEMICOLON
				{: 	RESULT = new StructDeclNode(i, new DeclListNode(sb));
				:}
				;

fnDecl			::= type:t id:i formals:f fnBody:fb
				{:RESULT = new FnDeclNode(t, i, f, fb);
				:}
				;

structBody		::= structBody:sb varDecl:i
				{: 
					sb.add(i);
					RESULT = sb;
				:}
				|
				varDecl:i
				{:
					LinkedList<DeclNode> newList = new LinkedList<DeclNode>();
					newList.add(i);
					RESULT = newList;
				:}
				;

formals			::= LPAREN RPAREN 
				{: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
				:}
				|
				LPAREN formalsList:fl RPAREN
				{: RESULT = new FormalsListNode(fl);
				:}
				;

formalsList		::= formalDecl:fd 
				{: LinkedList<FormalDeclNode> fl = new LinkedList<FormalDeclNode>();
				   fl.push(fd);
				   RESULT = fl;
				:}
				|
				formalDecl:fd COMMA formalsList:fl
				{: fl.push(fd);
				   RESULT = fl;
				:}
				;

formalDecl		::= type:t id:i
				{: RESULT = new FormalDeclNode(t, i);
				:}
				;

fnBody			::= LCURLY declList:vd stmtList: sl RCURLY
				{: RESULT = new FnBodyNode(new DeclListNode(vd), new StmtListNode(sl));
				:}
				;

stmtList		::= stmtList:sl stmt:st
				{:  sl.add(st);
					RESULT = sl;
				:}
				| /* epsilon */
				{: 	RESULT =  new LinkedList<StmtNode>();
				:}
				;

stmt			::= assignExp:ae SEMICOLON
				{: RESULT = new AssignStmtNode(ae);
				:}
				| 
				loc:l PLUSPLUS SEMICOLON
				{: RESULT = new PostIncStmtNode(l);
				:}
				|
				loc:l MINUSMINUS SEMICOLON
				{: RESULT = new PostDecStmtNode(l);
				:}
				| CIN READ loc:l SEMICOLON
				{: RESULT = new ReadStmtNode(l);
				:}
				| COUT WRITE exp:e SEMICOLON
				{: RESULT = new WriteStmtNode(e);
				:}
				|
				IF LPAREN exp:e RPAREN LCURLY declList:vdl stmtList:sl RCURLY	
				{: RESULT = new IfStmtNode(e, new DeclListNode(vdl), new StmtListNode(sl));
				:}
				|
				IF LPAREN exp:e RPAREN LCURLY declList:vdl1 stmtList:sl1 RCURLY ELSE LCURLY declList:vdl2 stmtList:sl2 RCURLY
				{: RESULT = new IfElseStmtNode(e, new DeclListNode(vdl1), new StmtListNode(sl1), new DeclListNode(vdl2), new StmtListNode(sl2));
				:}
				|
				WHILE LPAREN exp:e RPAREN LCURLY declList:vdl stmtList:sl RCURLY
				{: RESULT = new WhileStmtNode(e, new DeclListNode(vdl), new StmtListNode(sl));
				:}
				|
				RETURN exp:e SEMICOLON
				{: RESULT = new ReturnStmtNode(e);
				:}
				|
				RETURN SEMICOLON
				{: RESULT = new ReturnStmtNode(null);
				:}
				|
				fncall:f SEMICOLON
				{: RESULT = new CallStmtNode(f);
				:}
				;			

assignExp		::= loc:l ASSIGN exp:e
				{:
					RESULT = new AssignNode(l, e);
				:}
				;

exp				::= term:t
				 {: RESULT = t;
                :}
                |
                exp:e1 PLUS exp:e2
                {: RESULT = new PlusNode(e1, e2);
                :}
                |
                assignExp:ae
                {: RESULT = ae;
                :}
                |
                exp:e1 MINUS exp:e2
                {: RESULT = new MinusNode(e1, e2);
                :}
                |
                exp:e1 TIMES exp:e2
                {: RESULT = new TimesNode(e1, e2);
                :}
                |
                exp:e1 DIVIDE exp:e2
                {: RESULT = new DivideNode(e1, e2);
                :}
                |
                NOT exp:e
                {: RESULT = new NotNode(e);
                :}
                |
				exp:e1 AND exp:e2
				{: RESULT = new AndNode(e1, e2);
				:}
				|
				exp:e1 OR exp:e2
				{: RESULT = new OrNode(e1, e2);
				:}
                |
				exp:e1 EQUALS exp:e2
				{: RESULT = new EqualsNode(e1, e2);
				:}
				|
				exp:e1 NOTEQUALS exp:e2
				{: RESULT = new NotEqualsNode(e1, e2);
				:}
				|
				exp:e1 LESS exp:e2
				{: RESULT = new LessNode(e1, e2);
				:}
				|
				exp:e1 GREATER exp:e2
				{: RESULT = new GreaterNode(e1, e2);
				:}
				|
				exp:e1 LESSEQ exp:e2
				{: RESULT = new LessEqNode(e1, e2);
				:}
				|
				exp:e1 GREATEREQ exp:e2
				{: RESULT = new GreaterEqNode(e1, e2);
				:}
				|
				MINUS term:t
				{: RESULT = new UnaryMinusNode(t);
				:}
				;

term			::= loc:l
				{: RESULT = l;
				:}
				| INTLITERAL: i
				{:
				    RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
				:}
				| STRINGLITERAL: s
				{:
				    RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
				:}
				| TRUE: t
				{:
				    RESULT = new TrueNode(t.linenum, t.charnum);
				:}
				| FALSE: f
				{:
				    RESULT = new FalseNode(f.linenum, f.charnum);
				:}
				| LPAREN exp:e RPAREN
				{:
				    RESULT = e;
				:}
				| fncall:f
				{:
				    RESULT = f;
				:}
				;
				
fncall			::= id:i LPAREN RPAREN 
				{: RESULT = new CallExpNode(i);
				:}
				| id:i LPAREN actualList:al RPAREN
				{:
				   RESULT = new CallExpNode(i, new ExpListNode(al));
				:}
				;

actualList      ::= exp:e
                {:
                    LinkedList<ExpNode> l = new LinkedList<ExpNode>();
                    l.addLast(e);
                    RESULT = l;
                :}
                | actualList:l COMMA exp:e
                {:
                    l.addLast(e);
                    RESULT = l;
                :}
                ;

loc				::= id:i
				{: RESULT = i;
				:}
				| loc:l DOT id:i
				{:
                   RESULT = new DotAccessExpNode(l,i);
				:}
				;	



type            ::= INT
                {: RESULT = new IntNode();
                :}
                |
                BOOL
                {: RESULT = new BoolNode();
                :}
                |
                VOID
                {: RESULT = new VoidNode();
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
			
